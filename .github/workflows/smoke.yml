name: smoke
on:
  push:
    branches: master
    paths-ignore:
      - '**.md'
      - '**.rst'
      - '**.txt'
  pull_request:
    branches: master
    paths-ignore:
      - '**.md'
      - '**.rst'
      - '**.txt'
jobs:
  style:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Linters
        run: make lint

  nix:
    name: "py-${{ matrix.config.python }} lib-${{ matrix.config.ffmpeg }} ${{matrix.config.os}}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-24.04, python: "3.12", ffmpeg: "7.1.1", extras: true}
          - {os: macos-14, python: "3.11", ffmpeg: "7.1.1"}

    env:
      PYAV_PYTHON: python${{ matrix.config.python }}
      PYAV_LIBRARY: ffmpeg-${{ matrix.config.ffmpeg }}

    steps:
    - uses: actions/checkout@v4
      name: Checkout

    - name: Python ${{ matrix.config.python }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.config.python }}

    - name: OS Packages
      run: |
        case ${{ matrix.config.os }} in
          ubuntu-24.04)
            sudo apt-get update
            sudo apt-get install autoconf automake build-essential cmake \
              libtool pkg-config nasm zlib1g-dev libvorbis-dev libx264-dev
            if [[ "${{ matrix.config.extras }}" ]]; then
              sudo apt-get install doxygen wget
            fi
            ;;
          macos-14)
            brew install automake libtool nasm libpng libvorbis libvpx opus x264
            ;;
        esac

    - name: Pip and FFmpeg
      run: |
        . scripts/activate.sh ffmpeg-${{ matrix.config.ffmpeg }}
        scripts/build-deps

    - name: Build
      run: |
        . scripts/activate.sh ffmpeg-${{ matrix.config.ffmpeg }}
        scripts/build

    - name: Test
      run: |
        . scripts/activate.sh ffmpeg-${{ matrix.config.ffmpeg }}
        python -m bv --version # Assert it can import.
        make test

    - name: Docs
      if: matrix.config.extras
      run: |
        . scripts/activate.sh ffmpeg-${{ matrix.config.ffmpeg }}
        make -C docs html

    - name: Doctest
      if: matrix.config.extras
      run: |
        . scripts/activate.sh ffmpeg-${{ matrix.config.ffmpeg }}
        make -C docs test

    - name: Examples
      if: matrix.config.extras
      run: |
        . scripts/activate.sh ffmpeg-${{ matrix.config.ffmpeg }}
        scripts/test examples

  windows:
    name: "py-${{ matrix.config.python }} ${{matrix.config.os}}"
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, python: "3.11"}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.config.python }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools
        python -m pip install --upgrade --pre Cython
        python -m pip install numpy pytest

    - name: Test
      env:
        CIBW_ARCHS: AMD64
        CIBW_BEFORE_BUILD: python scripts/fetch-vendor.py /tmp/vendor
        CIBW_BEFORE_BUILD_WINDOWS: python scripts\fetch-vendor.py C:\cibw\vendor
        CIBW_ENVIRONMENT_WINDOWS: INCLUDE=C:\\cibw\\vendor\\include LIB=C:\\cibw\\vendor\\lib PYAV_SKIP_TESTS=unicode_filename
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair --add-path C:\cibw\vendor\bin -w {dest_dir} {wheel}
        CIBW_TEST_COMMAND: mv {project}/bv {project}/bv.disabled && python -m pytest {package}/tests && mv {project}/bv.disabled {project}/bv
        CIBW_TEST_REQUIRES: pytest numpy
      run: |
        pip install cibuildwheel delvewheel
        cibuildwheel --output-dir dist
      shell: bash
